{"version":3,"sources":["components/Orbit.jsx","components/Background.jsx","components/Floor.jsx","state.js","components/ColorPicker.jsx","components/BoundingBox.jsx","components/Model.jsx","components/Draggable.jsx","components/Cars.jsx","components/CameraControls.jsx","components/CameraButtons.jsx","components/Bulb.jsx","components/Lights.jsx","components/Effects.jsx","components/Spinner.jsx","App.js","reportWebVitals.js","index.js"],"names":["extend","OrbitControls","Orbit","_useThree","useThree","camera","gl","_jsx","attach","args","domElement","Background","props","texture","useLoader","THREE","process","formatted","useMemo","image","height","fromEquirectangularTexture","object","Floor","_useBox","useBox","_objectSpread","_useBox2","_slicedToArray","ref","_jsxs","receiveShadow","children","color","opacity","state","activeMesh","activeMeshName","cameraPos","target","shouldUpdate","sharedStyles","width","borderRadius","cursor","ColorPicker","handleClick","e","material","style","background","position","zIndex","left","right","margin","display","top","onClick","BoundingBox","_ref","_ref$position","_ref$offset","offset","_ref$dims","dims","_ref$visible","visible","mass","api","scale","wireframe","Model","mixer","model","GLTFLoader","path","animations","length","scene","forEach","clip","clipAction","play","useFrame","delta","_mixer","update","traverse","child","isMesh","castShadow","side","DragControls","Draggable","groupRef","useRef","controlsRef","_useState","useState","_useState2","setChildren","useEffect","current","addEventListener","orbitControls","enabled","_e$object$api","console","log","set","_e$object$api2","_e$object$api3","_e$object$api4","copy","velocity","transformGroup","Cars","_objectDestructuringEmpty","Suspense","fallback","Array","fill","CameraControls","_ref2","name","getObjectByName","lerp","clone","sub","justifyContent","alignItems","bottom","backgroundColor","fontSize","fontWeight","border","CameraButtons","sets","focusIndex","direction","_state$cameraPos","_state$target","num","apply","_toConsumableArray","_Fragment","Bulb","lights","push","Math","pow","emissive","Lights","intensity","Effects","setLights","EffectComposer","DepthOfField","focusDistance","focalLength","bokehScale","Spinner","_","get","rotation","y","x","App","window","innerWidth","innerHeight","windowDimensions","setWindowDimensions","handleResize","Canvas","powerPreference","antialias","stencil","depth","shadowMap","Physics","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2dede913.chunk.js","sourcesContent":["import { extend, useThree } from 'react-three-fiber';\r\nimport {\r\n    OrbitControls\r\n} from 'three/examples/jsm/controls/OrbitControls';\r\nextend({ OrbitControls });\r\n\r\nconst Orbit = () => {\r\n    const { camera, gl } = useThree();\r\n    return (\r\n        <orbitControls \r\n            attach='orbitControls'\r\n            args={[camera, gl.domElement]} \r\n        />\r\n    )\r\n}\r\n\r\nexport default Orbit;","import { useLoader, useThree } from 'react-three-fiber';\r\nimport * as THREE from 'three';\r\nimport { useMemo } from 'react';\r\n\r\nconst Background = props => {\r\n    const texture = useLoader(\r\n        THREE.TextureLoader,\r\n        process.env.PUBLIC_URL + '/modern-background-gray.jpeg'\r\n    );\r\n\r\n    const { gl } = useThree();\r\n    const formatted = useMemo(() =>\r\n        new THREE.WebGLCubeRenderTarget(\r\n                texture.image.height\r\n        ).fromEquirectangularTexture(gl, texture)\r\n    ,[gl, texture])\r\n\r\n    return (\r\n        <primitive\r\n            attach='background'\r\n            object={formatted}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Background;\r\n","import { useBox } from 'use-cannon';\r\n\r\nconst Floor = props => {\r\n    const [ref, api] = useBox(() => ({args: [20,1,10], ...props}))\r\n    return (\r\n        <mesh ref={ref} {...props} receiveShadow>\r\n            <boxBufferGeometry args={[200, 1, 200]} />\r\n            <meshPhysicalMaterial color={'black'} opacity={1}/>\r\n        </mesh>\r\n    )\r\n}\r\n\r\nexport default Floor;\r\n","import * as THREE from 'three'\r\n// model3 name: \"Capot001_CAR_PAINT_0\"\r\n// model s name: \"object005_bod_0\"\r\nconst state = {\r\n    activeMesh: {},\r\n    activeMeshName: \"Capot001_CAR_PAINT_0\",\r\n    cameraPos: new THREE.Vector3(9,2,4),\r\n    target: new THREE.Vector3(4,0,0),\r\n    shouldUpdate: true\r\n}\r\n\r\nexport default state","import * as THREE from 'three';\r\nimport state from '../state'\r\n\r\nconst sharedStyles = {\r\n    height: 50,\r\n    width: 50,\r\n    borderRadius: '50%',\r\n    cursor: 'pointer'\r\n};\r\n\r\nconst ColorPicker = props => {\r\n    const handleClick = e => {\r\n        if (!state.activeMesh) return;\r\n        state.activeMesh.material.color = new THREE.Color(e.target.style.background)\r\n    }\r\n    return (\r\n        <div\r\n            style={{\r\n                position: 'absolute',\r\n                zIndex: 1,\r\n                left: 0,\r\n                right: 0,\r\n                margin: 'auto',\r\n                width: 'fit-content',\r\n                display: 'flex',\r\n                top: '20px'\r\n            }}\r\n        >\r\n            <div\r\n                onClick={handleClick}\r\n                style={{\r\n                    background: 'rgb(243, 246, 247)',\r\n                    ...sharedStyles\r\n                }}\r\n            />\r\n            <div\r\n                onClick={handleClick}\r\n                style={{\r\n                    background: 'black',\r\n                    ...sharedStyles\r\n                }}\r\n            />\r\n            <div\r\n                onClick={handleClick}\r\n                style={{\r\n                    background: 'red',\r\n                    ...sharedStyles\r\n                }}\r\n            />\r\n            <div\r\n                onClick={handleClick}\r\n                style={{\r\n                    background: 'rgb(30, 75, 93)',\r\n                    ...sharedStyles\r\n                }}\r\n            />\r\n            <div\r\n                onClick={handleClick}\r\n                style={{\r\n                    background: '#000d89',\r\n                    ...sharedStyles\r\n                }}\r\n            />\r\n            <div\r\n                onClick={handleClick}\r\n                style={{\r\n                    background: '#175421',\r\n                    ...sharedStyles\r\n                }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ColorPicker;\r\n","import { useBox } from 'use-cannon'\r\n\r\nconst BoundingBox = ({\r\n    position = [0,0,0],\r\n    offset = [0,0,0],\r\n    dims = [1,1,1],\r\n    visible = false,\r\n    children\r\n}) => {\r\n    const [ref, api] = useBox(() => ({ mass: 1, args: dims, position: position }))\r\n    return (\r\n        <group ref={ref} api={api}>\r\n            <mesh scale={dims} visible={visible}>\r\n                <boxBufferGeometry />\r\n                <meshPhysicalMaterial wireframe/>\r\n            </mesh>\r\n            <group position={offset}>\r\n                {children}\r\n            </group>\r\n        </group>\r\n    )\r\n}\r\n\r\nexport default BoundingBox","import { useLoader, useFrame } from 'react-three-fiber';\r\nimport {\r\n    GLTFLoader\r\n} from 'three/examples/jsm/loaders/GLTFLoader';\r\nimport * as THREE from 'three'\r\n// small change\r\nconst Model = props => {\r\n    const model = useLoader(\r\n        GLTFLoader,\r\n        process.env.PUBLIC_URL + props.path\r\n    )\r\n\r\n    let mixer\r\n    if (model.animations.length > 0) {\r\n        mixer = new THREE.AnimationMixer(model.scene)\r\n        model.animations.forEach(clip => {\r\n            const action = mixer.clipAction(clip)\r\n            action.play()\r\n        })\r\n    }\r\n\r\n    useFrame((scene,delta) => {\r\n        mixer?.update(delta)\r\n    })\r\n\r\n    model.scene.traverse(child => {\r\n        if (child.isMesh) {\r\n            child.castShadow = true\r\n            child.receiveShadow = true\r\n            child.material.side = THREE.FrontSide\r\n        }\r\n    })\r\n\r\n    return (\r\n        <primitive\r\n            object={model.scene}\r\n            scale={props.scale}\r\n            position={props.position}\r\n        />\r\n    )\r\n}\r\n\r\nexport default Model;\r\n","import {\r\n    DragControls\r\n} from 'three/examples/jsm/controls/DragControls';\r\nimport { useRef, useEffect, useState } from 'react';\r\nimport { useThree, extend } from 'react-three-fiber';\r\nextend ({ DragControls });\r\n\r\nconst Draggable = props => {\r\n    const groupRef = useRef();\r\n    const controlsRef = useRef();\r\n    const [children, setChildren] = useState([])\r\n    const { camera, gl, scene } = useThree();\r\n\r\n    useEffect(() => {\r\n        setChildren(groupRef.current.children)\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        controlsRef.current.addEventListener(\r\n            'hoveron',\r\n            e => scene.orbitControls.enabled = false\r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'hoveroff',\r\n            e => scene.orbitControls.enabled = true\r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'dragstart',\r\n            e => {\r\n                console.log(e.object);\r\n                e.object.api?.mass.set(0)\r\n            }\r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'dragend',\r\n            e => e.object.api?.mass.set(1)\r\n        )\r\n        controlsRef.current.addEventListener(\r\n            'drag',\r\n            e => {\r\n                e.object.api?.position.copy(e.object.position)\r\n                e.object.api?.velocity.set(0,0,0)\r\n            }\r\n        )\r\n    },[children])\r\n\r\n    return (\r\n        <group ref={groupRef}>\r\n            <dragControls\r\n                transformGroup={props.transformGroup}\r\n                ref={controlsRef}\r\n                args={[children,camera, gl.domElement]}\r\n            />\r\n            {props.children}\r\n        </group>\r\n    )\r\n}\r\n\r\nexport default Draggable;\r\n","import { Suspense } from 'react'\r\nimport BoundingBox from './BoundingBox'\r\nimport Model from './Model'\r\nimport Draggable from './Draggable'\r\n\r\nconst Cars = ({ }) => {\r\n    return (\r\n        <Suspense fallback={null}>\r\n            <Draggable transformGroup>\r\n                <BoundingBox\r\n                    position={[4, 4, 0]}\r\n                    dims={[3, 2, 6]}\r\n                    offset={[0, -0.4, 0.8]}\r\n                >\r\n                    <Model\r\n                        path='/tesla_model_3/scene.gltf'\r\n                        scale={new Array(3).fill(0.01)}\r\n                    />\r\n                </BoundingBox>\r\n            </Draggable>\r\n            <Draggable transformGroup>\r\n                <BoundingBox\r\n                    position={[-4, 4, 0]}\r\n                    dims={[3, 2, 7]}\r\n                    offset={[0, -0.8, 0.2]}\r\n                >\r\n                    <Model\r\n                        path='/tesla_model_s/scene.gltf'\r\n                        scale={new Array(3).fill(0.013)}\r\n                    />\r\n                </BoundingBox>\r\n            </Draggable>\r\n            <Draggable transformGroup>\r\n                <BoundingBox\r\n                    position={[-8, 0, 0]}\r\n                    dims={[3, 2, 7]}\r\n                    offset={[-4, -0.9, -0.4]}\r\n                >\r\n                    <Model\r\n                        path='/tesla_roadster_2020_interior/scene.gltf'\r\n                        scale={new Array(3).fill(2)}\r\n                    />\r\n                </BoundingBox>\r\n            </Draggable>\r\n\r\n            {/*<Draggable transformGroup >*/}\r\n            {/*    <Model*/}\r\n            {/*        path='/old_gramophone/scene.gltf'*/}\r\n            {/*        scale={new THREE.Vector3(.05, .05, .05)}*/}\r\n            {/*        position={[0, 0, 3]}*/}\r\n            {/*    />*/}\r\n            {/*</Draggable>*/}\r\n            {/*<Draggable transformGroup>*/}\r\n            {/*    <BoundingBox*/}\r\n            {/*        dims={[3, 2, 6]}*/}\r\n            {/*    >*/}\r\n            {/*        <Model*/}\r\n            {/*            path='/spectral_rubix/scene.gltf'*/}\r\n            {/*            scale={new THREE.Vector3(.3, .3, .3)}*/}\r\n            {/*            position={[0, 1, -5]}*/}\r\n            {/*        />*/}\r\n            {/*    </BoundingBox>*/}\r\n            {/*</Draggable>*/}\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nexport default Cars\r\n","import { useFrame } from 'react-three-fiber'\r\nimport state from '../state'\r\n\r\nconst CameraControls = ({ }) => {\r\n\r\n    useFrame(({ camera, scene }) => {\r\n        if (state.activeMesh.name !== state.activeMeshName) {\r\n            state.activeMesh = scene.getObjectByName(\r\n                state.activeMeshName\r\n            ) || {}\r\n        }\r\n        if (state.shouldUpdate) {\r\n            camera.position.lerp(state.cameraPos,0.1)\r\n            scene.orbitControls.target.lerp(state.target,0.1)\r\n            scene.orbitControls.update()\r\n            const diff =\r\n                camera.position.clone()\r\n                .sub(state.cameraPos).length()\r\n            if (diff < 0.1) state.shouldUpdate = false\r\n        }\r\n    })\r\n    return (\r\n        null\r\n    )\r\n}\r\n\r\nexport default CameraControls\r\n","import {useState} from 'react';\r\nimport state from '../state'\r\n\r\nconst style = {\r\n    zIndex: 1,\r\n    position: 'absolute',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    bottom: '5vh',\r\n    height: '40px',\r\n    width: '40px',\r\n    backgroundColor: 'rgb(30, 75, 93)',\r\n    color: 'black',\r\n    borderRadius: '50%',\r\n    fontSize: 20,\r\n    fontWeight: 'bold',\r\n    border: '1px solid black',\r\n    cursor: 'pointer'\r\n}\r\n\r\nconst CameraButtons = ({}) => {\r\n    const sets = [\r\n        // Roadster\r\n        {\r\n            cameraPos: [-7, 2, 5],\r\n            target: [-12,0,0],\r\n            name: \"Object_6\"\r\n        },\r\n        // model_s\r\n        {\r\n            cameraPos: [1,2,5],\r\n            target: [-4,0,0],\r\n            name: \"object005_bod_0\"\r\n        },\r\n        // model_3\r\n        {\r\n            cameraPos: [9,2,4],\r\n            target: [4,0,0],\r\n            name: \"Capot001_CAR_PAINT_0\"\r\n        }\r\n    ];\r\n\r\n    let focusIndex = 2;\r\n    const handleClick = direction => {\r\n        if (direction === 'right' && focusIndex < sets.length - 1) {\r\n            focusIndex += 1;\r\n        } else if (direction === 'left' && focusIndex > 0) {\r\n            focusIndex -= 1;\r\n        } else {\r\n            console.log('no action')\r\n        }\r\n        const num = focusIndex;\r\n        state.cameraPos.set(...sets[num].cameraPos);\r\n        state.target.set(...sets[num].target);\r\n        state.activeMeshName = sets[num].name;\r\n        state.shouldUpdate = true;\r\n    };\r\n    return (\r\n        <>\r\n            <button\r\n                onClick={e => handleClick('left')}\r\n                style={{\r\n                    left: '40vw',\r\n                    ...style\r\n                }}\r\n            >\r\n                {'<'}\r\n            </button>\r\n            <button\r\n                onClick={e => handleClick('right')}\r\n                style={{\r\n                    right: '40vw',\r\n                    ...style\r\n                }}\r\n            >\r\n                {'>'}\r\n            </button>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CameraButtons\r\n","import { useEffect, useRef } from 'react'\r\nimport { useThree } from 'react-three-fiber'\r\n\r\nconst Bulb = props => {\r\n    const ref = useRef()\r\n    const { scene } = useThree()\r\n    useEffect(() => {\r\n        if (scene.lights) scene.lights.push(ref)\r\n        else scene.lights = [ref]\r\n    }, [])\r\n    return (\r\n        <mesh {...props} ref={ref}>\r\n            <pointLight\r\n                castShadow\r\n                shadow-mapSize-height={2**10}\r\n                shadow-mapSize-width={2**10}\r\n                shadow-radius={10}\r\n            />\r\n            <sphereBufferGeometry args={[0.2, 20, 20]} />\r\n            <meshPhongMaterial emissive='white' />\r\n        </mesh>\r\n    )\r\n}\r\n\r\nexport default Bulb;\r\n","import Bulb from './Bulb'\r\n\r\nconst Lights = ({}) => {\r\n    return (\r\n        <>\r\n            <ambientLight intensity={0.2}/>\r\n            <directionalLight \r\n                // shadow-mapSize-height={2**10}\r\n                // shadow-mapSize-width={2**10}\r\n                // shadow-radius={10}\r\n                intensity={0.5}\r\n                position={[6,3,0]}\r\n                // castShadow\r\n            />\r\n            <Bulb position={[-6,3,0]} />\r\n            <Bulb position={[0,3,0]} />\r\n            <Bulb position={[6, 3, 0]} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Lights\r\n","import { \r\n    EffectComposer,\r\n    DepthOfField,\r\n    GodRays\r\n} from 'react-postprocessing'\r\nimport { useState, useEffect } from 'react'\r\nimport { useThree } from 'react-three-fiber'\r\n\r\nconst Effects = () => {\r\n    const [lights, setLights] = useState(null)\r\n    const { scene } = useThree()\r\n    useEffect(() => {\r\n        if (scene.lights && scene.lights.length === 3)\r\n            setLights(scene.lights)\r\n    }, [scene.lights])\r\n    return (\r\n        lights ? \r\n        <EffectComposer>\r\n            <DepthOfField\r\n                focusDistance={0}\r\n                focalLength={0.02}\r\n                bokehScale={2}\r\n                height={480}\r\n            />\r\n            {/* {lights.map(light => \r\n                <GodRays \r\n                    key={light.current.uuid} \r\n                    sun={light.current}\r\n                />\r\n            )} */}\r\n        </EffectComposer>\r\n        :\r\n        null\r\n    )\r\n}\r\n\r\nexport default Effects","import React, {useRef} from 'react';\r\nimport * as THREE from 'three';\r\nimport {useFrame} from \"react-three-fiber\";\r\nimport _ from 'lodash';\r\n\r\nconst Spinner = () => {\r\n    const ref = useRef();\r\n    useFrame(state => {\r\n        const y = _.get(ref.current, 'rotation.y');\r\n        if (y) {\r\n            ref.current.rotation.y += .1;\r\n            ref.current.rotation.x += .1;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <mesh ref={ref} position={[0, 3, 0]}>\r\n            <dodecahedronBufferGeometry args={[1, 1]} />\r\n            <meshPhysicalMaterial color={'rgb(30, 75, 93)'} opacity={.5} side={THREE.DoubleSide}/>\r\n        </mesh>\r\n    )\r\n};\r\n\r\nexport default Spinner;\r\n","import { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport {\r\n    Canvas, useFrame\r\n} from 'react-three-fiber';\r\nimport { Physics } from 'use-cannon';\r\nimport { Suspense } from 'react';\r\nimport Orbit from './components/Orbit';\r\nimport Box from './components/Box';\r\nimport Background from './components/Background';\r\nimport Floor from './components/Floor';\r\nimport ColorPicker from './components/ColorPicker';\r\nimport Cars from './components/Cars'\r\nimport CameraControls from './components/CameraControls'\r\nimport CameraButtons from './components/CameraButtons'\r\nimport Lights from './components/Lights'\r\nimport Effects from './components/Effects'\r\nimport Spinner from \"./components/Spinner\";\r\n\r\nfunction App() {\r\n    const [windowDimensions, setWindowDimensions] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    });\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize);\r\n    }, [windowDimensions]);\r\n\r\n    const handleResize = () => {\r\n        setWindowDimensions({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        });\r\n    };\r\n  return (\r\n    <div style={{height: '100vh', width: '100vw'}}>\r\n      <ColorPicker />\r\n      <CameraButtons />\r\n      <Canvas\r\n        gl={{\r\n          powerPreference: \"high-performance\",\r\n          antialias: false,\r\n          stencil: false,\r\n          depth: false\r\n        }}\r\n        shadowMap\r\n        style={{background: 'black'}}\r\n        camera={{ position: [7,7,7] }}\r\n      >\r\n        <Suspense fallback={<Spinner />}>\r\n            <Background windowDimensions={windowDimensions} />\r\n        </Suspense>\r\n        <CameraControls />\r\n        <Lights/>\r\n        <Orbit />\r\n        <Physics>\r\n          <Cars />\r\n          <Floor position={[0,-0.5,0]}/>\r\n        </Physics>\r\n        <Effects />\r\n      </Canvas>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}